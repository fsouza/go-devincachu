A linguagem de programação Go

Francisco Souza
Dev in Cachu 2013
@franciscosouza
f@souza.cc
http://f.souza.cc

* 

.code code/prank.f90

* what the f**rancisco?!

- open source fanboy
- Desenvolvedor na Globo.com
- Usa Go diaramente para construir o Tsuru

.link http://tsuru.io

* Go?

Uma linguagem focada em algumas características...

- Eficiência
- Segurança
- Concorrência
- Escalabilidade
- Um mascote legal :)

* 

.image img/gopherrunning.jpg

* Por que uma nova linguagem?

* Linguagens estáticas

* 

.image img/compiling.png

* 

.play code/hello.go

* Tempo de compilação...

*Tsuru*: 16 mil linhas de código

        % time go install ./...
        2.53 real         3.03 user         0.56 sys

Compilador + biblioteca padrão: *230++* mil linhas de código

	% time ./make.bash
	47.89 real        59.23 user        11.54 sys

* Tempo de compilação (cont.)

.image img/fast-compile.png

* Linguagens dinâmicas

* 

.image img/slow.jpg

* Go: o melhor dos dois mundos?

* Explorando a biblioteca padrão...

.play code/hello_net.go

* Um pouco mais amigável...

.link http://127.0.0.1:7070/

.play code/hello_web.go

* Aspectos da linguagem

* Variáveis

Muitos jeitos de declarar, alguns mais verbosos, outros mais simples...

.code code/element.go /^\s+var name string$/,/fmt\.Print/

.code code/element.go /^\s+var name string =/,/fmt\.Print/

.code code/element.go /^\s+var name =/,/fmt\.Print/

.code code/element.go /^\s+name :=/,/fmt\.Print/

* Declarações

Na linguagem C e maioria de suas derivadas, declarações podem ser lidas em
espiral:

.image img/spiral.png

Detalhes:

.link http://c-faq.com/decl/spiral.anderson.html The Clockwise/Spiral Rule

* Declarações (cont.)

Em Go, as declarações são *sempre* da esquerda para a direita:

.code code/element.go /^\s+var name string/

.code code/element.go /^\s+var name string = /

.code code/element.go /^\s+var name = /

.code code/element.go /^\s+name := /

.code code/element.go /^\s+var f func/

* Loops

.code code/element.go /^\s+for i/,/^\s+}/

.code code/element.go /^\s+for {/,/^\s+}/

* Slices & arrays

Em Go, arrays são como os arrays estáticos em C:

	var numeros [16]int

Além dos arrays, existem os slices:

	var numeros []int

* Slices: exemplo

.code code/slice.go /^func Rever/,/^}/

.play code/slice.go /^func main/,/^}/

* Funções

.code code/func.go /^func sum/,/^}/

.code code/func.go /^func swap/,/^}/

.code code/func.go /^func split/,/^}/

.play code/func.go /^\s+fmt.Println\(/,/^\s+fmt\.Println\(split/

* Tipos

.code code/types.go /^type Person/,/^}/

.code code/types.go /^type MyString/

.code code/types.go /^type MyInt/

No pacote _time_:

	type Duration int64

* "Construtores"

Em Go, não existem construtores propriamente ditos, mas há uma convenção na
comunidade para construtores (_New<Tipo>_):

.code code/types.go /^func New/,/^}/

* Métodos

.code code/types.go /^type Person/,/^}/

.code code/types.go /^func \(/,/^}/

.play code/types.go /^\s+p,/,/\s+fmt\./

* Métodos (cont.)

.code code/types.go /^type MyInt/

.code code/types.go /^func \(i/,/^}/

* Interfaces

* Interfaces

Go possui interfaces, de forma semelhante à linguagem Java.

.code code/iface.go /^type Reader/,/^}/

Você pode declarar funções baseadas nessas interfaces:

.code code/iface.go /^func Dump/,/^}

* Interfaces (cont.)

Em _Go_, qualquer tipo que tenha o método especificado por uma interface,
automaticamente implementa aquela interface, de forma implícita.

Assim, qualquer tipo com o método _Read_ implementa a interface _Reader_ declarada
no slide anterior.

.code code/iface.go /^\s+resp/,/^\s+Dum/

.code code/iface.go /^\s+file,/,/^\s+file\./

* Tratamento de erros

* Lidando com erros

No construtor do tipo _Person_, o segundo retorno é do tipo _error_.

.code code/types.go /^func New/

* Lidando com erros (cont.)

Go não inclui o mecanismo de exceções de linguagens como Python e Java. Ao
invés disso, a linguagem utiliza o tipo _error_ para representar falhas.

Um idioma comum:

	func fazAlgumaCoisa() (*Result, error)

Tratando erros:

	result, err := fazAlgumaCoisa()
	if err != nil {
		panic(err)
	}

Ignorando erros:

	result, _ := fazAlgumaCoisa()

* Concorrência

* CSP

O modelo de concorrência é inspirado no *CSP* (Communicating Sequential Processes).

	PROC producer (CHAN INT out!)
		out ! 42
	:

	PROC consumer (CHAN INT in?)
		INT v:
		SEQ
			in ? v
	:

* CSP (cont.)

O modelo também inspirou outras linguagens, como *Occam*, *Erlang* e *Limbo*.

O modelo também está disponível em outras linguagens:

.link https://github.com/python-concurrency/python-csp python-csp

.link http://www.cs.kent.ac.uk/projects/ofa/jcsp/ JCSP

* CSP em Go

- Processos -> goroutines
- Canais -> canais :-)

* Goroutines

A criação de uma goroutine é uma simples chamada de função precedida pela
palavra-chave *go*.

.play code/say.go

* Canais

Em Go, diferentes goroutines se comunicam através de canais.

.code code/sum.go /^func sum/,/^}/

.play code/sum.go /^func main/,/^}/

* Um exemplo

.code code/elevator.go /^func elevator/,/^}/

.play code/elevator.go /^\s+ch :=/,/^\s+}/

* Concorrência vs Paralelismo

* Concorrência vs Paralelismo

- Concorrência: lidar com múltiplas coisas ao mesmo tempo
- Paralelismo: fazer múltiplas coisas ao mesmo tempo

.code code/elevator.go /^func elevator/,/^}/

.play code/elevator.go /^\s+ch :=/,/^\s+}/

* Hands on

.image img/handson.gif

* Download de arquivos

O exemplo visa demonstrar um client que baixa arquivos do site *textfiles.com*.

.image img/textfiles.png

* Download de arquivos (cont.)

Uso do programa:

	% ./download -h
	  -d="": Destination directory (where to save files)
	  -u="": URL to download files from
	  -w=2: Number of workers

Exemplo de uso:

	% ./download -d files -u http://www.textfiles.com/programming/ -w 50

* Solução

Cada worker é uma goroutine, que receberá um canal de arquivos para baixar.

.code code/download.go /^func download/

O _WaitGroup_ é um mecanismo de sincronização que permitirá esperar até que o
worker termine a execução.

* Solução (cont.)

Os workers receberão os arquivos a partir de um canal. Haverá um _extrator_
enviando os links através desse canal.

.code code/download.go /^func extract/

O extrator utilizará uma expressão regular para extrair os arquivos.

.code code/download.go /^var link/

* Declaração das flags

Go tem um pacote na biblioteca padrão para declaração de flags a serem
utilizadas na linha de comando.

.code code/download.go /^var url,/,/^}/

A função init é executada sempre que o pacote é importado. No caso do pacote
main, a função é executada antes da função _main_.

* Extrator

.code code/download.go /^func extract/,/^}/

* Worker

.code code/download.go /^func download/,/^}/

* Juntando todo mundo

.code code/download.go /^func main/,/^}/

* Demonstração

* Próximos passos

- Site da linguagem

.link http://golang.org

- A Tour of Go

.link http://tour.golang.org

- Effective Go

.link http://golang.org/doc/effective_go.html

- Communicating Sequential Processes

.link http://www.usingcsp.com

- Códigos da palestra

.link https://github.com/fsouza/go-devincachu
