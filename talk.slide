A linguagem de programação Go

Francisco Souza
Dev in Cachu 2013
@franciscosouza
f@souza.cc
http://f.souza.cc

* Go?

Uma linguagem focada em algumas características...

- Eficiência
- Segurança
- Concorrência
- Escalabilidade
- Um mascote legal :)

* 

.image img/gopherrunning.jpg

* Por que uma nova linguagem?

* Linguagens estáticas

* 

.image img/compiling.png

* 

.play code/hello.go

* Tempo de compilação...

*Tsuru*: 16 mil linhas de código

        % time go install ./...
        2.53 real         3.03 user         0.56 sys

Biblioteca padrão: *230* mil linhas de código

	% time go install ./...
	0.23 real         0.17 user         0.06 sys

* Linguagens dinâmicas

* 

.image img/slow.jpg

* Go: o melhor dos dois mundos?

* Explorando a biblioteca padrão...

.play code/hello_net.go

* Um pouco mais amigável...

.link http://127.0.0.1:7070/

.play code/hello_web.go

* Aspectos da linguagem

* Variáveis

Muitos jeitos de declarar, alguns mais verbosos, outros mais simples...

.code code/element.go /^\s+var name string$/,/fmt\.Print/

.code code/element.go /^\s+var name string =/,/fmt\.Print/

.code code/element.go /^\s+var name =/,/fmt\.Print/

.code code/element.go /^\s+name :=/,/fmt\.Print/

* Loops

.code code/element.go /^\s+for i/,/^\s+}/

.code code/element.go /^\s+for {/,/^\s+}/

* Slices & arrays

Em Go, arrays são como os arrays estáticos em C:

	var numeros [16]int

Além dos arrays, existem os slices:

	var numeros []int

* Slices: exemplo

.code code/slice.go /^func Rever/,/^}/

.play code/slice.go /^func main/,/^}/

* Concorrência

* CSP

O modelo de concorrência é inspirado no *CSP* (Communicating Sequential Processes).

	PROC producer (CHAN INT out!)
		out ! 42
	:

	PROC consumer (CHAN INT in?)
		INT v:
		SEQ
			in ? v
	:

* CSP (cont.)

O modelo também inspirou outras linguagens, como *Occam*, *Erlang* e *Limbo*.

O modelo também está disponível em outras linguagens:

.link https://github.com/python-concurrency/python-csp python-csp

.link http://www.cs.kent.ac.uk/projects/ofa/jcsp/ JCSP

* CSP em Go

- Processos -> goroutines
- Canais -> canais :-)

* Goroutines

A criação de uma goroutine é uma simples chamada de função precedida pela
palavra-chave *go*.

.play code/say.go

* Canais

Em Go, diferentes goroutines se comunicam através de canais.

.code code/sum.go /^func sum/,/^}/

.play code/sum.go /^func main/,/^}/

* Um exemplo

.code code/elevator.go /^func elevator/,/^}/

.play code/elevator.go /^\s+ch :=/,/^\s+}/

* Concorrência vs Paralelismo

* Concorrência vs Paralelismo

- Concorrência: lidar com múltiplas coisas ao mesmo tempo
- Paralelismo: fazer múltiplas coisas ao mesmo tempo

.code code/elevator.go /^func elevator/,/^}/

.play code/elevator.go /^\s+ch :=/,/^\s+}/
